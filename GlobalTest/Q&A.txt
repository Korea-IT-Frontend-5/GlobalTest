🎦 : 녹화본을 보며 답변해보기


1. FLUX 패턴에 대하여 설명해보세요

    - 주홍 : MVC 패턴의 문제점 중 하나인 오류를 찾는데 여러 파일들을 다 들여다 봐야하는 단점을 보완한 패턴으로 
        단방향 데이터 흐름을 특징을 가지고 있는 패턴이다.


    # 🎦
        - action 데이터를 dispatcher로 보내서 model(store)에 데이터를 전달하여 비지니스 로직(기능)을 실행하고 그 model(store)의 값을 view에 전달함

            ⭐ action     ➡️ 변경할 데이터 객체, dispatcher를 통해서 store에 전달
            ⭐ dispatcher ➡️ 데이터 흐름을 관리 (통로, 전달, 매개체)
            ⭐ store      ➡️ 상태(state)의 저장소, state를 변경할 수 있는 함수 또한 가지고 있음
            ⭐ view       ➡️ 화면


2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    주홍 : 
    (1) useReducer
        - 상태를 변경 혹은 업데이트 하는 로직을 컴포넌트에서 분리하여 전역에서 관리하고 싶을 때
            (비지니스 로직)

    (2) useContext
        - 전역에서 상태를 관리를 하고 싶을 때 사용한다. (어디서든지 상태를 불러올 수 있다. JAVA의 getter랑 비슷한 느낌?)

    # 🎦
        (1) useReducer
            - 상태 변경 혹은 업데이트 하는 로직을 컴포넌트에서 분리
            - 복잡한 상태 업데이트의 로직을 컴포넌트 안에서 관리하지 말고 바깥에 따로 빼서 관리할 수 있도록 하자
        
        (2) useContext
            - 전역 상태 관리를 위한 도구, 기능 자체는 redux와 동일
            - 보통은 업데이트 로직을 관리할 수 있는 reducer와 함께 사용
            - oop를 활용한 프론트엔드 DI(Dependency Injection:의존성 주입)에 응용 가능


3. 전역 상태 관리를 해야하는 이유는 무엇일까요.
    주홍 : 
    - 항상 나오는 유지보수 및 코드의 재사용성이 용이하다인데
        자세히 설명하자면 전역에서 상태의 값을 불러오거나 변경 혹은 업데이트를 할 수 있다면
        단 몇줄만의 코드를 수정한 것이 모든 컴포넌트에서 적용되기도 하고
        FLUX 패턴의 개발이기 때문에 개발시 오류추적에 매우 효율적이다.

    # 🎦
        컴포넌트에 전달되는 props의 depth가 깊어질수록 오류추적이 어려워서
        depth가 깊어질수도 있는 상태를 독립적으로 관리해서 어떠한 곳에서도 쓸 수 있게 만들기 위해서


4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요.

    주홍 : 
        - 장점의 경우는 위에서 언급한 바와 같이 간단한 오류추적, 단 몇줄만의 코드 수정으로 state의 재사용 코드의 길이를 줄이고 어느 컴포넌트에서든지 사용이 가능하다.
        - 단점의 경우는....